version: '3.8'

services:
  # Redis Cache para almacenamiento en cach√©
  redis:
    image: redis:7.2-alpine
    container_name: weather-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-weather_redis_pass}
    command: redis-server --requirepass ${REDIS_PASSWORD:-weather_redis_pass}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-weather_redis_pass}", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # Backend - Azure Functions con .NET 8.0
  weather-backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: weather-backend
    ports:
      - "7105:80"
    environment:
      - AzureWebJobsStorage=${AZURE_WEBJOBS_STORAGE:-UseDevelopmentStorage=true}
      - FUNCTIONS_WORKER_RUNTIME=${FUNCTIONS_WORKER_RUNTIME:-dotnet-isolated}
      - OpenWeatherMapApiKey=${OPENWEATHER_API_KEY}
      - RedisConnectionString=${REDIS_CONNECTION_STRING:-redis:6379,password=weather_redis_pass}
      - CacheDurationMinutes=${CACHE_DURATION_MINUTES:-15}
      - ForecastCacheDurationMinutes=${FORECAST_CACHE_DURATION_MINUTES:-60}
      - HighTemperatureThreshold=${HIGH_TEMPERATURE_THRESHOLD:-35.0}
      - LowTemperatureThreshold=${LOW_TEMPERATURE_THRESHOLD:-0.0}
      - HighWindSpeedThreshold=${HIGH_WIND_SPEED_THRESHOLD:-15.0}
      - RateLimitMaxRequests=${RATE_LIMIT_MAX_REQUESTS:-3}
      - RateLimitWindowSeconds=${RATE_LIMIT_WINDOW_SECONDS:-10}
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173,http://localhost:8080}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./apps/backend:/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Frontend - React + Tailwind + Alpine.js
  weather-frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
      target: development
    container_name: weather-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - VITE_API_BASE_URL=http://localhost:7105/api
      - VITE_APP_NAME=${VITE_APP_NAME:-Weather Dashboard}
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING:-true}
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
    depends_on:
      - weather-backend
    restart: unless-stopped
    stdin_open: true
    tty: true

  # Azurite - Emulador de Azure Storage para desarrollo local
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    container_name: weather-azurite
    ports:
      - "10000:10000"  # Blob service
      - "10001:10001"  # Queue service
      - "10002:10002"  # Table service
    volumes:
      - azurite_data:/data
    command: azurite --blobHost 0.0.0.0 --queueHost 0.0.0.0 --tableHost 0.0.0.0 --location /data --debug /data/debug.log
    restart: unless-stopped

  # Nginx - Proxy reverso para simular Azure Static Web Apps
  nginx:
    image: nginx:alpine
    container_name: weather-nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - weather-frontend
      - weather-backend
    restart: unless-stopped
    command: ["nginx", "-g", "daemon off;"]

  # Redis Commander - Interface web para gestionar Redis
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: weather-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-weather_redis_pass}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  azurite_data:
    driver: local

networks:
  default:
    name: weather-dashboard-network