name: Backend CI

on:
  push:
    paths:
      - 'apps/backend/**'
      - '.github/workflows/ci-backend.yml'
  pull_request:
    paths:
      - 'apps/backend/**'

defaults:
  run:
    working-directory: apps/backend

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Configure coverage settings
        run: |
          cat > coverlet.runsettings << 'EOF'
          <?xml version="1.0" encoding="utf-8" ?>
          <RunSettings>
            <DataCollectionRunSettings>
              <DataCollectors>
                <DataCollector friendlyName="XPlat code coverage">
                  <Configuration>
                    <Format>cobertura</Format>
                    <Exclude>[*.Tests]*,[*]*.Program,[*]*.Startup</Exclude>
                    <ExcludeByAttribute>Obsolete,GeneratedCodeAttribute,CompilerGeneratedAttribute</ExcludeByAttribute>
                    <ExcludeByFile>**/Migrations/**/*.cs,**/wwwroot/**/*.cs</ExcludeByFile>
                    <IncludeDirectory>../</IncludeDirectory>
                    <SingleHit>false</SingleHit>
                    <UseSourceLink>true</UseSourceLink>
                    <IncludeTestAssembly>false</IncludeTestAssembly>
                    <SkipAutoProps>true</SkipAutoProps>
                    <DeterministicReport>true</DeterministicReport>
                  </Configuration>
                </DataCollector>
              </DataCollectors>
            </DataCollectionRunSettings>
          </RunSettings>
          EOF

      - name: Run unit tests with coverage collection
        run: |
          dotnet test \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults \
            --settings coverlet.runsettings

      - name: Generate coverage report
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator \
            -reports:"./TestResults/**/coverage.cobertura.xml" \
            -targetdir:"./TestResults/CoverageReport" \
            -reporttypes:"Html;Cobertura" \
            -verbosity:Info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: backend
          directory: apps/backend
          files: ./TestResults/**/coverage.cobertura.xml
          fail_ci_if_error: false
          verbose: true

      - name: Archive coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: apps/backend/TestResults/CoverageReport/
          retention-days: 7

      - name: Post coverage summary as PR comment
        if: github.event_name == 'pull_request'
        uses: 5monkeys/cobertura-action@master
        with:
          path: apps/backend/TestResults/**/coverage.cobertura.xml
          minimum_coverage: 75
          fail_below_threshold: false
          show_missing: true

  code-quality:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Verify code formatting
        run: dotnet format --verify-no-changes --verbosity diagnostic

      - name: Run static analysis (build required)
        run: |
          dotnet tool install -g dotnet-sonarscanner || true
          dotnet build --configuration Release

  docker-build:
    runs-on: ubuntu-latest
    needs: [build-and-test]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/backend
          file: ./apps/backend/Dockerfile
          push: false
          load: true
          tags: weather-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Validate container health
        run: |
          docker run --rm -d --name test-backend weather-backend:test
          sleep 15

          echo "Verifying container is running..."
          docker ps | grep -q test-backend || { echo "Container did not start."; exit 1; }

          echo "Checking application is listening on port 80..."
          for i in {1..20}; do
            if docker exec test-backend netstat -tln | grep -q ":80"; then
              echo "Application is listening on port 80"
              break
            fi
            echo "Waiting for application startup... ($i/20)"
            sleep 2
          done

          echo "Validating Azure Functions runtime..."
          if docker logs test-backend 2>&1 | grep -q "Host started"; then
            FUNCTION_COUNT=$(docker logs test-backend 2>&1 | grep -c "Host.Functions\.")
            echo "Azure Functions host is running with $FUNCTION_COUNT functions loaded"
          else
            echo "Azure Functions host failed to start"
            exit 1
          fi

          echo "Loaded functions:"
          docker logs test-backend 2>&1 | grep "Found the following functions" -A 20 | head -20

          echo "Latest container logs:"
          docker logs test-backend 2>&1 | tail -20

          docker stop test-backend

  security-scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Perform dependency security audit
        run: |
          dotnet list package --vulnerable --include-transitive 2>&1 | tee audit-report.txt
          if grep -q "has the following vulnerable packages" audit-report.txt; then
            echo "Security vulnerabilities found:"
            cat audit-report.txt
            exit 1
          else
            echo "No known vulnerabilities detected"
          fi
